!function(e){"use strict";var o=function(){return null};function i(e,n,r,t,i,a){this.descriptor=e,this.byteCount=n,this.encode=t,this.decode=i,this.empty=r,this.fullMask=a||o,this.isBasic=!1}var l={},f=function(e,n){return 0!=(e[Math.floor(n/8)]&1<<n%8)},a=function(){return 0},s=function(e){for(var n=[],r=0;r<e;++r)n.push(0);return n},n=function(e,r,t){var n=new i(e,t,a,function(e,n){e.dataView["set"+r](e.index,n,1),e.add(t)},function(e){var n=e.dataView["get"+r](e.index,1);return e.add(t),n});return n.isBasic=!0,n};l.u8=n("u8","Uint8",1),l.u16=n("u16","Uint16",2),l.u32=n("u32","Uint32",4),l.i8=n("i8","Int8",1),l.i16=n("i16","Int16",2),l.i32=n("i32","Int32",4),l.f32=n("f32","Float32",4),l.f64=n("f64","Float64",8),l.bool=new i("bool",l.u8.byteCount,function(){return!1},function(e,n){l.u8.encode(e,n?1:0)},function(e){return 0!==l.u8.decode(e)}),l.bool.isBasic=!0;l.string=function(a){var o=l.arrayUnmasked(a,l.u8);return new i("s"+a,a,function(){return""},function(e,n){var r,t,i;o.encode(e,(r=n,t=a,i=new Uint8Array(t),r.split("").forEach(function(e,n){i[n]=e.charCodeAt(0)}),i[t-1]=0,i))},function(e){return function(e,n){for(var r="",t=Math.min(e.length,n-1),i=0;i<t;++i){if(0===e[i])return r;r+=String.fromCharCode(e[i])}return r}(o.decode(e),a)})},l.arrayUnmasked=function(e,n){for(var r=[],t=0;t<e;++t)r.push(n);var i=l.tupleUnmasked(r);return i.descriptor="["+n.descriptor+":"+e+"]",i},l.tupleUnmasked=function(e){var n=e.reduce(function(e,n){return e+n.byteCount},0);return new i("("+e.map(function(e){return e.descriptor}).join(",")+")",n,function(){return e.map(function(e){return e.empty()})},function(r,t,i){!0===i&&(i=null),e.forEach(function(e,n){e.encode(r,t[n],i&&i[n])})},function(n){return e.map(function(e){return e.decode(n)})},function(){var t=!1,i={};return e.forEach(function(e,n){var r=e.fullMask();null!==r&&(t=!0,i[n]=r)}),t?i:null})},l.arrayMasked=function(e,n,r){for(var t=[],i=0;i<e;++i)t.push(n);var a=l.tupleMasked(t,r),o=8*(a.byteCount-e*n.byteCount);return a.descriptor="[/"+o+"/"+n.descriptor+":"+e+"]",a},l.tupleMasked=function(e,n){var u=Math.ceil(e.length/8);n&&(u=Math.max(u,Math.ceil(n/8)));var c=l.arrayUnmasked(u,l.u8),r=e.reduce(function(e,n){return e+n.byteCount},u),t=e.map(function(e){return e.descriptor});return new i("(/"+8*u+"/"+t.join(",")+")",r,function(){return e.map(function(e){return e.empty()})},function(r,t,i){!0===i&&(i=null);var a=s(u),o=null;i&&"MASK"in i&&(o=i.MASK),e.forEach(function(e,n){var r=t[n];o&&!o[n]||null!=r&&(a[Math.floor(n/8)]|=1<<n%8)}),c.encode(r,a),e.forEach(function(e,n){f(a,n)&&e.encode(r,t[n],i&&i[n])})},function(r){var t=c.decode(r);return e.map(function(e,n){return f(t,n)?e.decode(r):null})},function(){var t={};return e.forEach(function(e,n){var r=e.fullMask();null!==r&&(t[n]=r)}),t.MASK=e.map(function(){return!0}),t})},l.mapUnmasked=function(e){var n=e.reduce(function(e,n){return e+n.handler.byteCount},0);return new i("{"+e.map(function(e){return e.key+":"+e.handler.descriptor}).join(",")+"}",n,function(){var n={};return e.forEach(function(e){n[e.key]=e.handler.empty()}),n},function(n,r,t){!0===t&&(t=null),e.forEach(function(e){e.handler.encode(n,r[e.key],t&&t[e.key])})},function(n){var r={};return e.forEach(function(e){r[e.key]=e.handler.decode(n)}),r},function(){var r=!1,t={};return e.forEach(function(e){var n=e.handler.fullMask();null!==n&&(r=!0,t[e.key]=n)}),r?t:null})},l.mapMasked=function(e,n){var u=Math.ceil(e.length/8);n&&(u=Math.max(u,Math.ceil(n/8)));var c=l.arrayUnmasked(u,l.u8),r=e.reduce(function(e,n){return e+n.handler.byteCount},u),t=e.map(function(e){return e.key+":"+e.handler.descriptor});return new i("{/"+8*u+"/"+t.join(",")+"}",r,function(){var n={};return e.forEach(function(e){n[e.key]=e.handler.empty()}),n},function(r,t,i){!0===i&&(i=null);var a=s(u),o=null;i&&"MASK"in i&&(o=i.MASK),e.forEach(function(e,n){var r=t[e.key];o&&!o[e.key]||null!=r&&(a[Math.floor(n/8)]|=1<<n%8)}),c.encode(r,a),e.forEach(function(e,n){f(a,n)&&e.handler.encode(r,t[e.key],i&&i[e.key])})},function(r){var t=c.decode(r),i={};return e.forEach(function(e,n){f(t,n)?i[e.key]=e.handler.decode(r):i[e.key]=null}),i},function(){var r={},t={};return e.forEach(function(e){var n=e.handler.fullMask();null!==n&&(r[e.key]=n),t[e.key]=!0}),r.MASK=t,r})},e.FlybrixSerialization||(e.FlybrixSerialization={}),e.FlybrixSerialization._handlers=l}(this),function(u){"use strict";function a(e,n){this.position=e,this.value=n}var c=/^\d+$/,n=/^\w+$/,o={SYMBOL:0,NUMBER:1,NAME:2};function r(e){this.position=e.position,this.value=e.value,c.test(this.value)?(this.category=o.NUMBER,this.value=parseInt(this.value)):n.test(this.value)?this.category=o.NAME:this.category=o.SYMBOL}var l=/^[{}\[\]()\/=:,;\w\s]*$/,t=function(e){if(n=e,!l.test(n))throw new Error("Passed config contains invalid characters");for(var n,r,t=/([{}\[\]()\/=:,;]|\w+)/g,i=[];null!==(r=t.exec(e));)i.push(new a(r.index,r[0]));return i},i=function(e){return e.map(function(e){return new r(e)})},f={NAMED:0,MAP_UNMASKED:2,MAP_MASKED:3,TUPLE_UNMASKED:4,TUPLE_MASKED:5,ARRAY_UNMASKED:6,ARRAY_MASKED:7};function s(e,n,r){this.category=e,this.properties=n,this.mask=r||0}s.prototype.generateHandler=function(n){var e,r=u.FlybrixSerialization._handlers,t=this.properties,i=this.mask,a=null;switch(this.category){case f.NAMED:if("s"===t[0]){var o=t.substring(1);c.test(o)&&(a=r.string(parseInt(o)))}else t in r?(a=r[t]).isBasic||(a=null):t in n&&(a=n[t]);if(!a)throw{position:-1,error:'Unrecognized type "'+t+'"'};return a;case f.MAP_UNMASKED:return e=t.map(function(e){return{key:e.name,handler:e.value.generateHandler(n)}}),r.mapUnmasked(e);case f.MAP_MASKED:return e=t.map(function(e){return{key:e.name,handler:e.value.generateHandler(n)}}),r.mapMasked(e,i);case f.TUPLE_UNMASKED:return e=t.map(function(e){return e.generateHandler(n)}),r.tupleUnmasked(e);case f.TUPLE_MASKED:return e=t.map(function(e){return e.generateHandler(n)}),r.tupleMasked(e,i);case f.ARRAY_UNMASKED:return r.arrayUnmasked(t.count,t.value.generateHandler(n));case f.ARRAY_MASKED:return r.arrayMasked(t.count,t.value.generateHandler(n),i);default:throw{position:-1,error:"Unrecognized type category"}}};var d=function(e){var n=e.dataView[e.index];if(e.add(1),!n)throw{position:-1,error:"Unexpected end of string"};return n},p=function(e){var n=d(e);if(n.category!==o.NAME)throw{position:n.position,error:'Expected name, got: "'+n.value+'"'};if("MASK"===n.value)throw{position:n.position,error:'Disallowed name "MASK" given'};return n.value},h=function(e,n){var r=d(e);if(r.value!==n)throw{position:r.position,error:'Expected "'+n+'", got: "'+r.value+'"'}},v=function(e){var n=d(e);if("/"!==n.value)return e.add(-1),{masked:!1};if("/"===(n=d(e)).value)return{masked:!0,defined:!1};if(n.category!==o.NUMBER)throw{position:n.position,error:'Expected "/" or number'};var r=n.value;if("/"!==(n=d(e)).value)throw{position:n.position,error:'Expected "/"'};return{masked:!0,defined:!0,value:r}},M=function(e){var n=v(e),r=y(e);h(e,":");var t=function(e){var n=d(e);if(n.category!==o.NUMBER)throw{position:n.position,error:'Expected number, got: "'+n.value+'"'};return n.value}(e);h(e,"]");var i={value:r,count:t};return n.masked?n.defined?new s(f.ARRAY_MASKED,i,n.value):new s(f.ARRAY_MASKED,i):new s(f.ARRAY_UNMASKED,i)},y=function(e){var n=d(e);if(!n)throw{position:-1,error:"Unexpected end of string"};if(n.category===o.NUMBER)throw{position:n.position,error:"Unexpected number, type expected"};if(n.category===o.NAME)return new s(f.NAMED,n.value);if("{"===n.value)return function(e){for(var n=v(e),r=[];;){var t=p(e);h(e,":");var i=y(e);r.push({name:t,value:i});var a=d(e);if("}"===a.value)return n.masked?n.defined?new s(f.MAP_MASKED,r,n.value):new s(f.MAP_MASKED,r):new s(f.MAP_UNMASKED,r);if(","!==a.value)throw{position:a.position,error:'Unexpected token after map element: "'+a.value+'"'}}}(e);if("["===n.value)return M(e);if("("===n.value)return function(e){for(var n=v(e),r=[];;){r.push(y(e));var t=d(e);if(")"===t.value)return n.masked?n.defined?new s(f.TUPLE_MASKED,r,n.value):new s(f.TUPLE_MASKED,r):new s(f.TUPLE_UNMASKED,r);if(","!==t.value)throw{position:t.position,error:'Unexpected token after tuple element: "'+t.value+'"'}}}(e);throw{position:n.position,error:'Unexpected token when describing type: "'+n.value+'"'}},E=function(e,n){for(var r=new u.FlybrixSerialization.Serializer(e),t=[];r.index<r.dataView.length;){var i=p(r);if(i[0]!==i[0].toUpperCase())throw{position:-1,error:"Structure names cannot start with lowercase letters"};h(r,"=");var a=y(r);h(r,";"),t.push({name:i,value:a})}return t};u.FlybrixSerialization||(u.FlybrixSerialization={}),u.FlybrixSerialization._parserSteps={tokenizer:t,lexer:i,parser:E,TokenCategories:o,TypeCategories:f,StringToken:a,Token:r,Type:s},u.FlybrixSerialization.parse=function(e){try{return n=E(i(t(e))),r={},n.forEach(function(e){r[e.name]=e.value.generateHandler(r)}),r}catch(e){throw new Error(e.error)}var n,r}}(this),function(e){"use strict";function n(e){this.index=0,this.dataView=e}n.prototype.add=function(e){this.index+=e},e.FlybrixSerialization||(e.FlybrixSerialization={}),e.FlybrixSerialization.Serializer=n}(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
