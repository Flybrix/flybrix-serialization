!function(n){"use strict";var c=function(){return null},l=function(){return[]},f=function(n){return null==n};function s(n,e,r,t,i,o,a,u){this.descriptor=n,this.byteCount=e,this.encode=t,this.decode=i,this.empty=r,this.fullMask=o||c,this.maskArray=a||l,this.isNull=u||f}var d={},h=function(n,e){return 0!=(n[Math.floor(e/8)]&1<<e%8)},i=function(){return 0},v=function(n){for(var e=[],r=0;r<n;++r)e.push(0);return e},e=function(n,r,t){var e=new s(n,t,i,function(n,e){n.dataView["set"+r](n.index,e,1),n.add(t)},function(n){var e=n.dataView["get"+r](n.index,1);return n.add(t),e});return e.isBasic=!0,e};d.u8=e("u8","Uint8",1),d.u16=e("u16","Uint16",2),d.u32=e("u32","Uint32",4),d.i8=e("i8","Int8",1),d.i16=e("i16","Int16",2),d.i32=e("i32","Int32",4),d.f32=e("f32","Float32",4),d.f64=e("f64","Float64",8),d.bool=new s("bool",d.u8.byteCount,function(){return!1},function(n,e){d.u8.encode(n,e?1:0)},function(n){return 0!==d.u8.decode(n)}),d.bool.isBasic=!0,d.void=new s("void",0,function(){return!0},function(n,e){},function(){return!0},null,null,function(n){return!n}),d.void.isBasic=!0;d.string=function(o){var a=d.arrayUnmasked(o,d.u8);return new s("s"+o,o,function(){return""},function(n,e){var r,t,i;a.encode(n,(r=e,t=o,i=new Uint8Array(t),r.split("").forEach(function(n,e){i[e]=n.charCodeAt(0)}),i[t-1]=0,i))},function(n){return function(n,e){for(var r="",t=Math.min(n.length,e-1),i=0;i<t;++i){if(0===n[i])return r;r+=String.fromCharCode(n[i])}return r}(a.decode(n),o)})},d.s=new s("s",0,function(){return""},function(n,e){for(var r=Math.min(e.length,n.dataView.byteLength-n.index),t=0;t<r;++t)d.u8.encode(n,e.charCodeAt(t));n.index<n.dataView.byteLength&&d.u8.encode(n,0)},function(n){for(var e="",r=n.dataView.byteLength-n.index;0<r--;){var t=d.u8.decode(n);if(!t)return e;e+=String.fromCharCode(t)}return e}),d.s.isBasic=!0,d.arrayUnmasked=function(n,e){for(var r=[],t=0;t<n;++t)r.push(e);var i=d.tupleUnmasked(r);return i.descriptor="["+e.descriptor+":"+n+"]",i},d.tupleUnmasked=function(n){var e=n.reduce(function(n,e){return n+e.byteCount},0);return new s("("+n.map(function(n){return n.descriptor}).join(",")+")",e,function(){return n.map(function(n){return n.empty()})},function(r,t,i){!0===i&&(i=null),n.forEach(function(n,e){n.encode(r,t[e],i&&i[e])})},function(e){return n.map(function(n){return n.decode(e)})},function(){var t=!1,i={};return n.forEach(function(n,e){var r=n.fullMask();null!==r&&(t=!0,i[e]=r)}),t?i:null})},d.arrayMasked=function(n,e,r){for(var t=[],i=0;i<n;++i)t.push(e);var o=d.tupleMasked(t,r),a=8*(o.byteCount-n*e.byteCount);return o.descriptor="[/"+a+"/"+e.descriptor+":"+n+"]",o},d.tupleMasked=function(e,n){var r=Math.ceil(e.length/8);n&&(r=Math.max(r,Math.ceil(n/8)));var a=d.arrayUnmasked(r,d.u8),u=function(t,n){!0===n&&(n=null);var i=v(r),o=null;return n&&"MASK"in n&&(o=n.MASK),e.forEach(function(n,e){var r=t[e];o&&!o[e]||n.isNull(r)||(i[Math.floor(e/8)]|=1<<e%8)}),i},t=e.reduce(function(n,e){return n+e.byteCount},r),i=e.map(function(n){return n.descriptor});return new s("(/"+8*r+"/"+i.join(",")+")",t,function(){return e.map(function(n){return n.empty()})},function(r,t,i){var o=u(t,i);a.encode(r,o),e.forEach(function(n,e){h(o,e)&&n.encode(r,t[e],i&&i[e])})},function(r){var t=a.decode(r);return e.map(function(n,e){return h(t,e)?n.decode(r):null})},function(){var t={};return e.forEach(function(n,e){var r=n.fullMask();null!==r&&(t[e]=r)}),t.MASK=e.map(function(){return!0}),t},u)},d.mapUnmasked=function(n){var e=n.reduce(function(n,e){return n+e.handler.byteCount},0);return new s("{"+n.map(function(n){return n.key+":"+n.handler.descriptor}).join(",")+"}",e,function(){var e={};return n.forEach(function(n){e[n.key]=n.handler.empty()}),e},function(e,r,t){!0===t&&(t=null),n.forEach(function(n){n.handler.encode(e,r[n.key],t&&t[n.key])})},function(e){var r={};return n.forEach(function(n){r[n.key]=n.handler.decode(e)}),r},function(){var r=!1,t={};return n.forEach(function(n){var e=n.handler.fullMask();null!==e&&(r=!0,t[n.key]=e)}),r?t:null})},d.mapMasked=function(a,n){var e=Math.ceil(a.length/8);n&&(e=Math.max(e,Math.ceil(n/8)));var u=d.arrayUnmasked(e,d.u8),c=function(t,n){!0===n&&(n=null);var i=v(e),o=null;return n&&"MASK"in n&&(o=n.MASK),a.forEach(function(n,e){var r=t[n.key];o&&!o[n.key]||n.handler.isNull(r)||(i[Math.floor(e/8)]|=1<<e%8)}),i},r=a.reduce(function(n,e){return n+e.handler.byteCount},e),t=a.map(function(n){return n.key+":"+n.handler.descriptor});return new s("{/"+8*e+"/"+t.join(",")+"}",r,function(){var e={};return a.forEach(function(n){e[n.key]=n.handler.empty()}),e},function(r,t,i){var o=c(t,i);u.encode(r,o),a.forEach(function(n,e){h(o,e)&&n.handler.encode(r,t[n.key],i&&i[n.key])})},function(r){var t=u.decode(r),i={};return a.forEach(function(n,e){h(t,e)&&(i[n.key]=n.handler.decode(r))}),i},function(){var r={},t={};return a.forEach(function(n){var e=n.handler.fullMask();null!==e&&(r[n.key]=e),t[n.key]=!0}),r.MASK=t,r},c)},n.FlybrixSerialization||(n.FlybrixSerialization={}),n.FlybrixSerialization._handlers=d}(this),function(u){"use strict";function o(n,e){this.position=n,this.value=e}var c=/^\d+$/,e=/^\w+$/,a={SYMBOL:0,NUMBER:1,NAME:2};function r(n){this.position=n.position,this.value=n.value,c.test(this.value)?(this.category=a.NUMBER,this.value=parseInt(this.value)):e.test(this.value)?this.category=a.NAME:this.category=a.SYMBOL}var l=/^[{}\[\]()\/=:,;\w\s]*$/,t=function(n){if(e=n,!l.test(e))throw new Error("Passed config contains invalid characters");for(var e,r,t=/([{}\[\]()\/=:,;]|\w+)/g,i=[];null!==(r=t.exec(n));)i.push(new o(r.index,r[0]));return i},i=function(n){return n.map(function(n){return new r(n)})},f={NAMED:0,MAP_UNMASKED:2,MAP_MASKED:3,TUPLE_UNMASKED:4,TUPLE_MASKED:5,ARRAY_UNMASKED:6,ARRAY_MASKED:7};function s(n,e,r){this.category=n,this.properties=e,this.mask=r||0}s.prototype.generateHandler=function(e){var n,r=u.FlybrixSerialization._handlers,t=this.properties,i=this.mask,o=null;switch(this.category){case f.NAMED:if(t in r)(o=r[t]).isBasic||(o=null);else if("s"===t[0]){var a=t.substring(1);c.test(a)&&(o=r.string(parseInt(a)))}else t in e&&(o=e[t]);if(!o)throw{position:-1,error:'Unrecognized type "'+t+'"'};return o;case f.MAP_UNMASKED:return n=t.map(function(n){return{key:n.name,handler:n.value.generateHandler(e)}}),r.mapUnmasked(n);case f.MAP_MASKED:return n=t.map(function(n){return{key:n.name,handler:n.value.generateHandler(e)}}),r.mapMasked(n,i);case f.TUPLE_UNMASKED:return n=t.map(function(n){return n.generateHandler(e)}),r.tupleUnmasked(n);case f.TUPLE_MASKED:return n=t.map(function(n){return n.generateHandler(e)}),r.tupleMasked(n,i);case f.ARRAY_UNMASKED:return r.arrayUnmasked(t.count,t.value.generateHandler(e));case f.ARRAY_MASKED:return r.arrayMasked(t.count,t.value.generateHandler(e),i);default:throw{position:-1,error:"Unrecognized type category"}}};var d=function(n){var e=n.dataView[n.index];if(n.add(1),!e)throw{position:-1,error:"Unexpected end of string"};return e},h=function(n){var e=d(n);if(e.category!==a.NAME)throw{position:e.position,error:'Expected name, got: "'+e.value+'"'};if("MASK"===e.value)throw{position:e.position,error:'Disallowed name "MASK" given'};return e.value},v=function(n,e){var r=d(n);if(r.value!==e)throw{position:r.position,error:'Expected "'+e+'", got: "'+r.value+'"'}},p=function(n){var e=d(n);if("/"!==e.value)return n.add(-1),{masked:!1};if("/"===(e=d(n)).value)return{masked:!0,defined:!1};if(e.category!==a.NUMBER)throw{position:e.position,error:'Expected "/" or number'};var r=e.value;if("/"!==(e=d(n)).value)throw{position:e.position,error:'Expected "/"'};return{masked:!0,defined:!0,value:r}},y=function(n){var e=p(n),r=M(n);v(n,":");var t=function(n){var e=d(n);if(e.category!==a.NUMBER)throw{position:e.position,error:'Expected number, got: "'+e.value+'"'};return e.value}(n);v(n,"]");var i={value:r,count:t};return e.masked?e.defined?new s(f.ARRAY_MASKED,i,e.value):new s(f.ARRAY_MASKED,i):new s(f.ARRAY_UNMASKED,i)},M=function(n){var e=d(n);if(!e)throw{position:-1,error:"Unexpected end of string"};if(e.category===a.NUMBER)throw{position:e.position,error:"Unexpected number, type expected"};if(e.category===a.NAME)return new s(f.NAMED,e.value);if("{"===e.value)return function(n){for(var e=p(n),r=[];;){var t=h(n);v(n,":");var i=M(n);r.push({name:t,value:i});var o=d(n);if("}"===o.value)return e.masked?e.defined?new s(f.MAP_MASKED,r,e.value):new s(f.MAP_MASKED,r):new s(f.MAP_UNMASKED,r);if(","!==o.value)throw{position:o.position,error:'Unexpected token after map element: "'+o.value+'"'}}}(n);if("["===e.value)return y(n);if("("===e.value)return function(n){for(var e=p(n),r=[];;){r.push(M(n));var t=d(n);if(")"===t.value)return e.masked?e.defined?new s(f.TUPLE_MASKED,r,e.value):new s(f.TUPLE_MASKED,r):new s(f.TUPLE_UNMASKED,r);if(","!==t.value)throw{position:t.position,error:'Unexpected token after tuple element: "'+t.value+'"'}}}(n);throw{position:e.position,error:'Unexpected token when describing type: "'+e.value+'"'}},E=function(n,e){for(var r=new u.FlybrixSerialization.Serializer(n),t=[];r.index<r.dataView.length;){var i=h(r);if(i[0]!==i[0].toUpperCase())throw{position:-1,error:"Structure names cannot start with lowercase letters"};v(r,"=");var o=M(r);v(r,";"),t.push({name:i,value:o})}return t};u.FlybrixSerialization||(u.FlybrixSerialization={}),u.FlybrixSerialization._parserSteps={tokenizer:t,lexer:i,parser:E,TokenCategories:a,TypeCategories:f,StringToken:o,Token:r,Type:s},u.FlybrixSerialization.parse=function(n){try{return e=E(i(t(n))),r={},e.forEach(function(n){r[n.name]=n.value.generateHandler(r)}),r}catch(n){throw new Error(n.error)}var e,r}}(this),function(n){"use strict";function e(n){this.index=0,this.dataView=n}e.prototype.add=function(n){this.index+=n},n.FlybrixSerialization||(n.FlybrixSerialization={}),n.FlybrixSerialization.Serializer=e}(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
